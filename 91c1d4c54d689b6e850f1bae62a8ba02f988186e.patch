From 91c1d4c54d689b6e850f1bae62a8ba02f988186e Mon Sep 17 00:00:00 2001
From: TechTastic <74630543+TechTastic@users.noreply.github.com>
Date: Sat, 31 Dec 2022 22:09:11 -0600
Subject: [PATCH] Started TIS-3D Integration

---
 .../{ => cc}/ValkyrienComputersBlocksCC.java  |   5 +-
 .../vc/tis/ValkyrienComputersItemsTIS.java    |  37 ++++
 .../techtastic/vc/ValkyrienComputersConfig.kt |  31 +++
 .../techtastic/vc/ValkyrienComputersMod.kt    |  12 +-
 fabric/build.gradle                           |   3 +
 .../fabric/ValkyrienComputersModFabric.java   |  13 ++
 .../cc/valkyrienskies/RadarPeripheral.java    |   2 +-
 .../RadarPeripheralProvider.java              |   2 +-
 .../valkyrienskies/ShipReaderPeripheral.java  |   3 +-
 .../ShipReaderPeripheralProvider.java         |   2 +-
 .../tis/valkyrienskies/RadarModule.java       | 180 ++++++++++++++++++
 .../valkyrienskies/RadarModuleProvider.java   |  25 +++
 .../tis/valkyrienskies/ShipReaderModule.java  |  11 ++
 .../ShipReaderModuleProvider.java             |  25 +++
 .../ValkyrienComputersModuleProviders.java    |  10 +
 .../cc/valkyrienskies/RadarPeripheral.java    |   2 +-
 .../RadarPeripheralProvider.java              |   2 +-
 .../valkyrienskies/ShipReaderPeripheral.java  |   2 +-
 .../ShipReaderPeripheralProvider.java         |   2 +-
 19 files changed, 356 insertions(+), 13 deletions(-)
 rename common/src/main/java/net/techtastic/vc/{ => cc}/ValkyrienComputersBlocksCC.java (93%)
 create mode 100644 common/src/main/java/net/techtastic/vc/tis/ValkyrienComputersItemsTIS.java
 create mode 100644 fabric/src/main/java/net/techtastic/vc/fabric/integrations/tis/valkyrienskies/RadarModule.java
 create mode 100644 fabric/src/main/java/net/techtastic/vc/fabric/integrations/tis/valkyrienskies/RadarModuleProvider.java
 create mode 100644 fabric/src/main/java/net/techtastic/vc/fabric/integrations/tis/valkyrienskies/ShipReaderModule.java
 create mode 100644 fabric/src/main/java/net/techtastic/vc/fabric/integrations/tis/valkyrienskies/ShipReaderModuleProvider.java
 create mode 100644 fabric/src/main/java/net/techtastic/vc/fabric/integrations/tis/valkyrienskies/ValkyrienComputersModuleProviders.java

diff --git a/common/src/main/java/net/techtastic/vc/ValkyrienComputersBlocksCC.java b/common/src/main/java/net/techtastic/vc/cc/ValkyrienComputersBlocksCC.java
similarity index 93%
rename from common/src/main/java/net/techtastic/vc/ValkyrienComputersBlocksCC.java
rename to common/src/main/java/net/techtastic/vc/cc/ValkyrienComputersBlocksCC.java
index bc8e878..6af88a1 100644
--- a/common/src/main/java/net/techtastic/vc/ValkyrienComputersBlocksCC.java
+++ b/common/src/main/java/net/techtastic/vc/cc/ValkyrienComputersBlocksCC.java
@@ -1,4 +1,4 @@
-package net.techtastic.vc;
+package net.techtastic.vc.cc;
 
 import dan200.computercraft.shared.ComputerCraftRegistry;
 import dan200.computercraft.shared.media.items.ItemDisk;
@@ -17,6 +17,9 @@
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.material.Material;
+import net.techtastic.vc.ValkyrienComputersConfig;
+import net.techtastic.vc.ValkyrienComputersMod;
+import net.techtastic.vc.ValkyrienComputersTab;
 
 import java.util.Iterator;
 
diff --git a/common/src/main/java/net/techtastic/vc/tis/ValkyrienComputersItemsTIS.java b/common/src/main/java/net/techtastic/vc/tis/ValkyrienComputersItemsTIS.java
new file mode 100644
index 0000000..8dc81be
--- /dev/null
+++ b/common/src/main/java/net/techtastic/vc/tis/ValkyrienComputersItemsTIS.java
@@ -0,0 +1,37 @@
+package net.techtastic.vc.tis;
+
+import me.shedaniel.architectury.registry.DeferredRegister;
+import me.shedaniel.architectury.registry.RegistrySupplier;
+import net.minecraft.core.Registry;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.world.item.CreativeModeTab;
+import net.minecraft.world.item.Item;
+import net.techtastic.vc.ValkyrienComputersConfig;
+import net.techtastic.vc.ValkyrienComputersConfig.Server.TIS;
+import net.techtastic.vc.ValkyrienComputersMod;
+import net.techtastic.vc.ValkyrienComputersTab;
+
+public class ValkyrienComputersItemsTIS {
+    public static DeferredRegister<Item> ITEMS = DeferredRegister.create(ValkyrienComputersMod.MOD_ID, Registry.ITEM_REGISTRY);
+
+    public static RegistrySupplier<Item> RADAR;
+    public static RegistrySupplier<Item> READER;
+
+    public static RegistrySupplier<Item> registerItem(String name, Item item) {
+        return ITEMS.register(new ResourceLocation(ValkyrienComputersMod.MOD_ID, name), () -> item);
+    }
+
+    public static void registerItems() {
+        CreativeModeTab tab = ValkyrienComputersTab.tab;
+
+        TIS config = ValkyrienComputersConfig.SERVER.getTIS3D();
+        if (!config.getDisableRadars()) {
+            RADAR = registerItem("radar_tis", new Item(new Item.Properties().tab(tab)));
+        }
+        if (!config.getDisableShipReaders()) {
+            READER = registerItem("reader_tis", new Item(new Item.Properties().tab(tab)));
+        }
+
+        ITEMS.register();
+    }
+}
diff --git a/common/src/main/kotlin/net/techtastic/vc/ValkyrienComputersConfig.kt b/common/src/main/kotlin/net/techtastic/vc/ValkyrienComputersConfig.kt
index ef0f37b..d9cfbd3 100644
--- a/common/src/main/kotlin/net/techtastic/vc/ValkyrienComputersConfig.kt
+++ b/common/src/main/kotlin/net/techtastic/vc/ValkyrienComputersConfig.kt
@@ -62,5 +62,36 @@ object ValkyrienComputersConfig {
             @JsonSchema(description = "Maximum Range of Radars")
             val maxRadarRadius = 256
         }
+
+        val TIS3D = TIS()
+
+        class TIS {
+            @JsonSchema(description = "Disable TIS-3D Integration")
+            val disableTIS3D = false;
+
+            @JsonSchema(description = "Disable Eureka Integration")
+            val disableEureka = false;
+
+            @JsonSchema(description = "Disable Radars")
+            val disableRadars = false
+
+            @JsonSchema(description = "Disable Ship Readers")
+            val disableShipReaders = false
+
+            val RadarSettings = RADARSETTINGS()
+
+            class RADARSETTINGS {
+                @JsonSchema(description = "Maximum Range of Radars")
+                val maxRadarRadius = 256
+
+                val radarGetsName = true
+                val radarGetsPosition = true
+                val radarGetsMass = true
+                val radarGetsRotation = false
+                val radarGetsVelocity = false
+                val radarGetsDistance = false
+                val radarGetsSize = false
+            }
+        }
     }
 }
diff --git a/common/src/main/kotlin/net/techtastic/vc/ValkyrienComputersMod.kt b/common/src/main/kotlin/net/techtastic/vc/ValkyrienComputersMod.kt
index 04c0f6d..16a7ef8 100644
--- a/common/src/main/kotlin/net/techtastic/vc/ValkyrienComputersMod.kt
+++ b/common/src/main/kotlin/net/techtastic/vc/ValkyrienComputersMod.kt
@@ -2,7 +2,8 @@ package net.techtastic.vc
 
 import me.shedaniel.architectury.event.events.TickEvent
 import me.shedaniel.architectury.platform.Platform
-import net.minecraft.world.item.CreativeModeTab
+import net.techtastic.vc.cc.ValkyrienComputersBlocksCC
+import net.techtastic.vc.tis.ValkyrienComputersItemsTIS
 import org.valkyrienskies.core.config.VSConfigClass
 
 object ValkyrienComputersMod {
@@ -17,11 +18,16 @@ object ValkyrienComputersMod {
 
         ValkyrienComputersTab.registerTab()
 
-        val config = ValkyrienComputersConfig.SERVER.ComputerCraft
-        if (Platform.isModLoaded("computercraft") && !config.disableComputerCraft) {
+        val CC_config = ValkyrienComputersConfig.SERVER.ComputerCraft
+        if (Platform.isModLoaded("computercraft") && !CC_config.disableComputerCraft) {
             ValkyrienComputersBlocksCC.registerCCBlocks()
         }
 
+        val TIS_config = ValkyrienComputersConfig.SERVER.TIS3D
+        if (Platform.isModLoaded("tis3d") && !TIS_config.disableTIS3D) {
+            ValkyrienComputersItemsTIS.registerItems()
+        }
+
         TickEvent.SERVER_POST.register {
             val list = switchTickList()
             list.forEach { it() }
diff --git a/fabric/build.gradle b/fabric/build.gradle
index 487027d..1a4ff54 100644
--- a/fabric/build.gradle
+++ b/fabric/build.gradle
@@ -56,6 +56,9 @@ dependencies {
     // CC Restitched
     modCompileOnly("curse.maven:cc-restitched-462672:3622561")
 
+    // TIS-3D
+    modImplementation("curse.maven:tis-3d-238603:3384198")
+
     // Eureka
     modCompileOnly("curse.maven:eureka-654384:4134994")
 }
diff --git a/fabric/src/main/java/net/techtastic/vc/fabric/ValkyrienComputersModFabric.java b/fabric/src/main/java/net/techtastic/vc/fabric/ValkyrienComputersModFabric.java
index 2b12561..a5bdf82 100644
--- a/fabric/src/main/java/net/techtastic/vc/fabric/ValkyrienComputersModFabric.java
+++ b/fabric/src/main/java/net/techtastic/vc/fabric/ValkyrienComputersModFabric.java
@@ -4,9 +4,11 @@
 import net.fabricmc.loader.api.FabricLoader;
 import net.techtastic.vc.ValkyrienComputersConfig;
 import net.techtastic.vc.ValkyrienComputersConfig.Server.COMPUTERCRAFT;
+import net.techtastic.vc.ValkyrienComputersConfig.Server.TIS;
 import net.techtastic.vc.ValkyrienComputersMod;
 import net.techtastic.vc.fabric.integrations.cc.eureka.EurekaPeripheralProviders;
 import net.techtastic.vc.fabric.integrations.cc.valkyrienskies.ValkyrienComputersPeripheralProviders;
+import net.techtastic.vc.fabric.integrations.tis.valkyrienskies.ValkyrienComputersModuleProviders;
 
 public class ValkyrienComputersModFabric implements ModInitializer {
     @Override
@@ -31,5 +33,16 @@ public void onInitialize() {
                 EurekaPeripheralProviders.registerPeripheralProviders();
             }
         }
+
+        TIS TIS_Config = ValkyrienComputersConfig.SERVER.getTIS3D();
+        if (mods.isModLoaded("tis3d") && !TIS_Config.getDisableTIS3D()) {
+            // TIS-3D is loaded
+
+            ValkyrienComputersModuleProviders.registerModuleProivders();
+
+            if (mods.isModLoaded("vs_eureka") && !CC_Config.getDisableEureka()) {
+                // Eureka is loaded
+            }
+        }
     }
 }
diff --git a/fabric/src/main/java/net/techtastic/vc/fabric/integrations/cc/valkyrienskies/RadarPeripheral.java b/fabric/src/main/java/net/techtastic/vc/fabric/integrations/cc/valkyrienskies/RadarPeripheral.java
index 356d03f..f76328c 100644
--- a/fabric/src/main/java/net/techtastic/vc/fabric/integrations/cc/valkyrienskies/RadarPeripheral.java
+++ b/fabric/src/main/java/net/techtastic/vc/fabric/integrations/cc/valkyrienskies/RadarPeripheral.java
@@ -6,7 +6,7 @@
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.level.Level;
-import net.techtastic.vc.ValkyrienComputersBlocksCC;
+import net.techtastic.vc.cc.ValkyrienComputersBlocksCC;
 import net.techtastic.vc.ValkyrienComputersConfig;
 import net.techtastic.vc.ValkyrienComputersConfig.Server.COMPUTERCRAFT.RADARSETTINGS;
 import org.jetbrains.annotations.NotNull;
diff --git a/fabric/src/main/java/net/techtastic/vc/fabric/integrations/cc/valkyrienskies/RadarPeripheralProvider.java b/fabric/src/main/java/net/techtastic/vc/fabric/integrations/cc/valkyrienskies/RadarPeripheralProvider.java
index 8e50956..125d5e0 100644
--- a/fabric/src/main/java/net/techtastic/vc/fabric/integrations/cc/valkyrienskies/RadarPeripheralProvider.java
+++ b/fabric/src/main/java/net/techtastic/vc/fabric/integrations/cc/valkyrienskies/RadarPeripheralProvider.java
@@ -5,7 +5,7 @@
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.world.level.Level;
-import net.techtastic.vc.ValkyrienComputersBlocksCC;
+import net.techtastic.vc.cc.ValkyrienComputersBlocksCC;
 import org.jetbrains.annotations.NotNull;
 
 public class RadarPeripheralProvider implements IPeripheralProvider {
diff --git a/fabric/src/main/java/net/techtastic/vc/fabric/integrations/cc/valkyrienskies/ShipReaderPeripheral.java b/fabric/src/main/java/net/techtastic/vc/fabric/integrations/cc/valkyrienskies/ShipReaderPeripheral.java
index c2536f8..aa19b26 100644
--- a/fabric/src/main/java/net/techtastic/vc/fabric/integrations/cc/valkyrienskies/ShipReaderPeripheral.java
+++ b/fabric/src/main/java/net/techtastic/vc/fabric/integrations/cc/valkyrienskies/ShipReaderPeripheral.java
@@ -7,8 +7,7 @@
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.level.Level;
-import net.minecraft.world.phys.Vec3;
-import net.techtastic.vc.ValkyrienComputersBlocksCC;
+import net.techtastic.vc.cc.ValkyrienComputersBlocksCC;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 import org.joml.Quaterniondc;
diff --git a/fabric/src/main/java/net/techtastic/vc/fabric/integrations/cc/valkyrienskies/ShipReaderPeripheralProvider.java b/fabric/src/main/java/net/techtastic/vc/fabric/integrations/cc/valkyrienskies/ShipReaderPeripheralProvider.java
index a8a1344..b3514d1 100644
--- a/fabric/src/main/java/net/techtastic/vc/fabric/integrations/cc/valkyrienskies/ShipReaderPeripheralProvider.java
+++ b/fabric/src/main/java/net/techtastic/vc/fabric/integrations/cc/valkyrienskies/ShipReaderPeripheralProvider.java
@@ -6,7 +6,7 @@
 import net.minecraft.core.Direction;
 import net.minecraft.world.level.Level;
 import net.techtastic.vc.ValkyrienComputersConfig;
-import net.techtastic.vc.ValkyrienComputersBlocksCC;
+import net.techtastic.vc.cc.ValkyrienComputersBlocksCC;
 import org.jetbrains.annotations.NotNull;
 
 public class ShipReaderPeripheralProvider implements IPeripheralProvider {
diff --git a/fabric/src/main/java/net/techtastic/vc/fabric/integrations/tis/valkyrienskies/RadarModule.java b/fabric/src/main/java/net/techtastic/vc/fabric/integrations/tis/valkyrienskies/RadarModule.java
new file mode 100644
index 0000000..2e0b2c9
--- /dev/null
+++ b/fabric/src/main/java/net/techtastic/vc/fabric/integrations/tis/valkyrienskies/RadarModule.java
@@ -0,0 +1,180 @@
+package net.techtastic.vc.fabric.integrations.tis.valkyrienskies;
+
+import li.cil.tis3d.api.machine.Casing;
+import li.cil.tis3d.api.machine.Face;
+import li.cil.tis3d.api.machine.Pipe;
+import li.cil.tis3d.api.machine.Port;
+import li.cil.tis3d.api.prefab.module.AbstractModuleWithRotation;
+import net.minecraft.core.BlockPos;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.level.Level;
+import net.techtastic.vc.ValkyrienComputersConfig;
+import net.techtastic.vc.ValkyrienComputersConfig.Server.TIS.RADARSETTINGS;
+import org.joml.Quaterniondc;
+import org.joml.Vector3d;
+import org.joml.Vector3dc;
+import org.joml.primitives.AABBic;
+import org.valkyrienskies.core.game.ships.ShipData;
+import org.valkyrienskies.mod.common.VSGameUtilsKt;
+
+import java.nio.charset.Charset;
+import java.util.ArrayList;
+import java.util.List;
+
+public class RadarModule extends AbstractModuleWithRotation {
+    private Object[] radar_result;
+    private Object[] ship_result;
+    private Object[] sub_result;
+    private int[] args;
+    private State state = State.INIT;
+    private Commands command = Commands.NONE;
+
+    public enum State {
+        INIT,
+        ARG,
+        EXEC,
+        IDLE
+
+    }
+
+    public enum Commands {
+        NONE,
+        SCAN,
+        DATA
+    }
+
+    public RadarModule(Casing casing, Face face) {
+        super(casing, face);
+    }
+
+    @Override
+    public void step() {
+        stepOutput();
+        stepInput();
+    }
+
+    @Override
+    public void onDisabled() {
+        state = State.INIT;
+        command = Commands.NONE;
+        args = new int[] {};
+        radar_result = new Object[] {};
+    }
+
+    private void stepInput() {
+        for (Port port : Port.VALUES) {
+            final Pipe receiving = getCasing().getReceivingPipe(getFace(), port);
+            if (!receiving.isReading()) receiving.beginRead();
+
+            if (!receiving.canTransfer()) return;
+
+            short input = receiving.read();
+            switch (command) {
+                case SCAN:
+                    if (state.equals(State.INIT)) {
+                        if (input > ValkyrienComputersConfig.SERVER.getTIS3D().getRadarSettings().getMaxRadarRadius()) return;
+
+                        args = new int[]{input};
+                        state = State.EXEC;
+                    }
+                    break;
+                case DATA:
+                    if (state.equals(State.INIT)) {
+
+                    }
+
+                    if (state.equals(State.ARG)) {
+
+                    }
+                    break;
+                default:
+                    initCommand(input);
+            }
+        }
+    }
+
+    private void stepOutput() {
+        if (state.equals(State.EXEC)) {
+            switch (command) {
+                case SCAN:
+                    scan(args[0]);
+
+                    state = State.IDLE;
+                    command = Commands.NONE;
+                    break;
+                case DATA:
+                    // Grab Data at indexes
+                    break;
+                default:
+                    return;
+            }
+        }
+    }
+
+    private void initCommand(short input) {
+        switch (input) {
+            case 1:
+                state = State.INIT;
+                command = Commands.SCAN;
+                break;
+            case 2:
+                state = State.INIT;
+                command = Commands.DATA;
+                break;
+            default:
+                return;
+        }
+    }
+
+    private void scan(double radius) {
+        Level level = getCasing().getCasingWorld();
+        BlockPos pos = getCasing().getPosition();
+
+        List<Vector3d> ships = VSGameUtilsKt.transformToNearbyShipsAndWorld(level, pos.getX(), pos.getY(), pos.getZ(), radius);
+        radar_result = new Object[ships.size()];
+        for (Vector3d vec : ships) {
+            ShipData ship = VSGameUtilsKt.getShipManagingPos((ServerLevel) level, vec.x, vec.y, vec.z);
+            Quaterniondc rot = ship.getShipTransform().getShipCoordinatesToWorldCoordinatesRotation();
+            Vector3dc vel = ship.getVelocity();
+            AABBic aabb = ship.getShipVoxelAABB();
+
+            byte[] name = ship.getName().getBytes(Charset.forName("Cp437"));
+            double mass = ship.getInertiaData().getShipMass();
+            Object[] position = new Object[] {
+                    (short) vec.x,
+                    (short) vec.y,
+                    (short) vec.z
+            };
+            Object[] rotation = new Object[] {
+                    (short) rot.x(),
+                    (short) rot.y(),
+                    (short) rot.z(),
+                    (short) rot.w()
+            };
+            Object[] velocity = new Object[] {
+                    (short) vel.x(),
+                    (short) vel.y(),
+                    (short) vel.z()
+            };
+            double distance = VSGameUtilsKt.squaredDistanceBetweenInclShips(level, pos.getX(), pos.getY(), pos.getZ(), vec.x, vec.y, vec.z);
+            Object[] size = new Object[] {
+                    (short) Math.abs(aabb.maxX() - aabb.minX()),
+                    (short) Math.abs(aabb.maxY() - aabb.minY()),
+                    (short) Math.abs(aabb.maxZ() - aabb.minZ())
+            };
+
+            ArrayList<Object> data = new ArrayList<Object>();
+
+            RADARSETTINGS settings = ValkyrienComputersConfig.SERVER.getTIS3D().getRadarSettings();
+            if (settings.getRadarGetsName()) data.add(name);
+            if (settings.getRadarGetsMass()) data.add((short) mass);
+            if (settings.getRadarGetsPosition()) data.add(position);
+            if (settings.getRadarGetsRotation()) data.add(rotation);
+            if (settings.getRadarGetsVelocity()) data.add(velocity);
+            if (settings.getRadarGetsDistance()) data.add((short) distance);
+            if (settings.getRadarGetsSize()) data.add(size);
+
+            radar_result[ships.indexOf(vec)] = data;
+        }
+    }
+}
diff --git a/fabric/src/main/java/net/techtastic/vc/fabric/integrations/tis/valkyrienskies/RadarModuleProvider.java b/fabric/src/main/java/net/techtastic/vc/fabric/integrations/tis/valkyrienskies/RadarModuleProvider.java
new file mode 100644
index 0000000..a20bc70
--- /dev/null
+++ b/fabric/src/main/java/net/techtastic/vc/fabric/integrations/tis/valkyrienskies/RadarModuleProvider.java
@@ -0,0 +1,25 @@
+package net.techtastic.vc.fabric.integrations.tis.valkyrienskies;
+
+import li.cil.tis3d.api.machine.Casing;
+import li.cil.tis3d.api.machine.Face;
+import li.cil.tis3d.api.module.Module;
+import li.cil.tis3d.api.module.ModuleProvider;
+import net.minecraft.world.item.ItemStack;
+import net.techtastic.vc.tis.ValkyrienComputersItemsTIS;
+import org.jetbrains.annotations.Nullable;
+
+public class RadarModuleProvider implements ModuleProvider {
+    @Override
+    public boolean worksWith(ItemStack itemStack, Casing casing, Face face) {
+        if (ValkyrienComputersItemsTIS.RADAR.isPresent()) {
+            return itemStack.getItem().equals(ValkyrienComputersItemsTIS.RADAR.get());
+        }
+        return false;
+    }
+
+    @Nullable
+    @Override
+    public Module createModule(ItemStack itemStack, Casing casing, Face face) {
+        return new RadarModule(casing, face);
+    }
+}
diff --git a/fabric/src/main/java/net/techtastic/vc/fabric/integrations/tis/valkyrienskies/ShipReaderModule.java b/fabric/src/main/java/net/techtastic/vc/fabric/integrations/tis/valkyrienskies/ShipReaderModule.java
new file mode 100644
index 0000000..74a2484
--- /dev/null
+++ b/fabric/src/main/java/net/techtastic/vc/fabric/integrations/tis/valkyrienskies/ShipReaderModule.java
@@ -0,0 +1,11 @@
+package net.techtastic.vc.fabric.integrations.tis.valkyrienskies;
+
+import li.cil.tis3d.api.machine.Casing;
+import li.cil.tis3d.api.machine.Face;
+import li.cil.tis3d.api.prefab.module.AbstractModuleWithRotation;
+
+public class ShipReaderModule extends AbstractModuleWithRotation {
+    public ShipReaderModule(Casing casing, Face face) {
+        super(casing, face);
+    }
+}
diff --git a/fabric/src/main/java/net/techtastic/vc/fabric/integrations/tis/valkyrienskies/ShipReaderModuleProvider.java b/fabric/src/main/java/net/techtastic/vc/fabric/integrations/tis/valkyrienskies/ShipReaderModuleProvider.java
new file mode 100644
index 0000000..44917a6
--- /dev/null
+++ b/fabric/src/main/java/net/techtastic/vc/fabric/integrations/tis/valkyrienskies/ShipReaderModuleProvider.java
@@ -0,0 +1,25 @@
+package net.techtastic.vc.fabric.integrations.tis.valkyrienskies;
+
+import li.cil.tis3d.api.machine.Casing;
+import li.cil.tis3d.api.machine.Face;
+import li.cil.tis3d.api.module.Module;
+import li.cil.tis3d.api.module.ModuleProvider;
+import net.minecraft.world.item.ItemStack;
+import net.techtastic.vc.tis.ValkyrienComputersItemsTIS;
+import org.jetbrains.annotations.Nullable;
+
+public class ShipReaderModuleProvider implements ModuleProvider {
+    @Override
+    public boolean worksWith(ItemStack itemStack, Casing casing, Face face) {
+        if (ValkyrienComputersItemsTIS.READER.isPresent()) {
+            return itemStack.getItem().equals(ValkyrienComputersItemsTIS.READER.get());
+        }
+        return false;
+    }
+
+    @Nullable
+    @Override
+    public Module createModule(ItemStack itemStack, Casing casing, Face face) {
+        return new ShipReaderModule(casing, face);
+    }
+}
diff --git a/fabric/src/main/java/net/techtastic/vc/fabric/integrations/tis/valkyrienskies/ValkyrienComputersModuleProviders.java b/fabric/src/main/java/net/techtastic/vc/fabric/integrations/tis/valkyrienskies/ValkyrienComputersModuleProviders.java
new file mode 100644
index 0000000..29ccf92
--- /dev/null
+++ b/fabric/src/main/java/net/techtastic/vc/fabric/integrations/tis/valkyrienskies/ValkyrienComputersModuleProviders.java
@@ -0,0 +1,10 @@
+package net.techtastic.vc.fabric.integrations.tis.valkyrienskies;
+
+import li.cil.tis3d.common.API;
+
+public class ValkyrienComputersModuleProviders {
+    public static void registerModuleProivders() {
+        API.module.addProvider(new RadarModuleProvider());
+        API.module.addProvider(new ShipReaderModuleProvider());
+    }
+}
diff --git a/forge/src/main/java/net/techtastic/vc/forge/integrations/cc/valkyrienskies/RadarPeripheral.java b/forge/src/main/java/net/techtastic/vc/forge/integrations/cc/valkyrienskies/RadarPeripheral.java
index db6f73e..5e017c6 100644
--- a/forge/src/main/java/net/techtastic/vc/forge/integrations/cc/valkyrienskies/RadarPeripheral.java
+++ b/forge/src/main/java/net/techtastic/vc/forge/integrations/cc/valkyrienskies/RadarPeripheral.java
@@ -8,7 +8,7 @@
 import net.minecraft.world.level.Level;
 import net.techtastic.vc.ValkyrienComputersConfig;
 import net.techtastic.vc.ValkyrienComputersConfig.Server.COMPUTERCRAFT.RADARSETTINGS;
-import net.techtastic.vc.ValkyrienComputersBlocksCC;
+import net.techtastic.vc.cc.ValkyrienComputersBlocksCC;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 import org.joml.Quaterniondc;
diff --git a/forge/src/main/java/net/techtastic/vc/forge/integrations/cc/valkyrienskies/RadarPeripheralProvider.java b/forge/src/main/java/net/techtastic/vc/forge/integrations/cc/valkyrienskies/RadarPeripheralProvider.java
index 0de3a36..32bea9f 100644
--- a/forge/src/main/java/net/techtastic/vc/forge/integrations/cc/valkyrienskies/RadarPeripheralProvider.java
+++ b/forge/src/main/java/net/techtastic/vc/forge/integrations/cc/valkyrienskies/RadarPeripheralProvider.java
@@ -6,7 +6,7 @@
 import net.minecraft.core.Direction;
 import net.minecraft.world.level.Level;
 import net.minecraftforge.common.util.LazyOptional;
-import net.techtastic.vc.ValkyrienComputersBlocksCC;
+import net.techtastic.vc.cc.ValkyrienComputersBlocksCC;
 import org.jetbrains.annotations.NotNull;
 
 public class RadarPeripheralProvider implements IPeripheralProvider {
diff --git a/forge/src/main/java/net/techtastic/vc/forge/integrations/cc/valkyrienskies/ShipReaderPeripheral.java b/forge/src/main/java/net/techtastic/vc/forge/integrations/cc/valkyrienskies/ShipReaderPeripheral.java
index 77f1e32..e314cbe 100644
--- a/forge/src/main/java/net/techtastic/vc/forge/integrations/cc/valkyrienskies/ShipReaderPeripheral.java
+++ b/forge/src/main/java/net/techtastic/vc/forge/integrations/cc/valkyrienskies/ShipReaderPeripheral.java
@@ -7,7 +7,7 @@
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.level.Level;
-import net.techtastic.vc.ValkyrienComputersBlocksCC;
+import net.techtastic.vc.cc.ValkyrienComputersBlocksCC;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 import org.joml.Quaterniondc;
diff --git a/forge/src/main/java/net/techtastic/vc/forge/integrations/cc/valkyrienskies/ShipReaderPeripheralProvider.java b/forge/src/main/java/net/techtastic/vc/forge/integrations/cc/valkyrienskies/ShipReaderPeripheralProvider.java
index 1385cfc..699c31b 100644
--- a/forge/src/main/java/net/techtastic/vc/forge/integrations/cc/valkyrienskies/ShipReaderPeripheralProvider.java
+++ b/forge/src/main/java/net/techtastic/vc/forge/integrations/cc/valkyrienskies/ShipReaderPeripheralProvider.java
@@ -7,7 +7,7 @@
 import net.minecraft.world.level.Level;
 import net.minecraftforge.common.util.LazyOptional;
 import net.techtastic.vc.ValkyrienComputersConfig;
-import net.techtastic.vc.ValkyrienComputersBlocksCC;
+import net.techtastic.vc.cc.ValkyrienComputersBlocksCC;
 import org.jetbrains.annotations.NotNull;
 
 public class ShipReaderPeripheralProvider implements IPeripheralProvider {
